model {
    components {
        "\$project.name"(NativeLibrarySpec) {
            sources {
                cpp_srcs(CppSourceSet) {
                    source {
                        srcDirs "\$rootDir/modules/\${project.name}"
                        <% includedSourceCount.times { %>
                        include "src/src${it}_cpp.cpp"
                        <% } %>
                    }
                    exportedHeaders {
                        srcDirs "\$rootDir/modules/\${project.name}/src"
                        include "**/*.h"
                    }
                }
                c_srcs(CSourceSet) {
                    source {
                        srcDirs "\$rootDir/modules/\${project.name}"
                        <% includedSourceCount.times { %>
                        include "src/src${it}_c.c"
                        <% } %>
                    }
                    exportedHeaders {
                        srcDirs "\$rootDir/modules/\${project.name}/src"
                        include "**/*.h"
                    }
                }
            }
            binaries.all {
                // TODO: Use dependency graph builder to created a layered native build
                <% prebuiltLibraries.times { %>
                // TODO: Use a different linkage
                lib project: ':', library: "prebuilt$it", linkage: 'api'
                <% } %>

                if (!project.hasProperty("includeHack")) {
                    lib project: ':', library: "commonHeaders", linkage: 'api'
                } else {
                    <% if (overlapWithOutput) { %>
                        cCompiler.args "-I\${rootDir}"
                        cppCompiler.args "-I\${rootDir}"
                    <% } else { %>
                        cCompiler.args "-I\${rootDir}/common"
                        cppCompiler.args "-I\${rootDir}/common"
                    <% } %>
                }
            }
        }
    }
}
