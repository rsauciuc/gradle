${original}

import java.lang.management.ManagementFactory
import java.math.RoundingMode

gradle.buildFinished {
    if (project.hasProperty('heapdump')) {
        boolean skipHeapDump = false

        if (['buildExperimentPhase', 'buildExperimentIterationNumber', 'buildExperimentIterationMax'].every { project.hasProperty(it) }) {
            // only dump heap automaticly on the last iteration of the testrun (not in warmup)
            if (project.buildExperimentPhase != 'measurement' || project.buildExperimentIterationNumber != project.buildExperimentIterationMax) {
                skipHeapDump = true
            }
        }

        if (!skipHeapDump) {
            def hotspotDiagnosticMXBean
            try {
                def hotspotDiagnosticMXBeanClass = Class.forName("com.sun.management.HotSpotDiagnosticMXBean")
                hotspotDiagnosticMXBean = ManagementFactory.getPlatformMXBeans(hotspotDiagnosticMXBeanClass).get(0)
            } catch (Exception e) {
                logger.error("Couldn't locate MBean for doing heap dump.", e)
            }
            if (hotspotDiagnosticMXBean) {
                logger.lifecycle "Creating heap dump..."
                def dumpDescription = (project.hasProperty("buildExperimentDisplayName") ? (rootProject.name + "_" + project.buildExperimentDisplayName) : rootProject.name).replaceAll("[^a-zA-Z0-9.-]", "_").replaceAll("[_]+", "_")
                File dumpFile = new File(System.getProperty("java.io.tmpdir"), "heapdump-\${dumpDescription}-\${new Date().format('yyyy-MM-dd-HH-mm-ss')}.hprof")
                hotspotDiagnosticMXBean.dumpHeap(dumpFile.absolutePath, true)
                logger.lifecycle "Dumped to \${dumpFile.absolutePath}."
            }
        }
    }

    def heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    def nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "BEFORE GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, committed \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, committed \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"

    ManagementFactory.memoryMXBean.gc()

    heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "AFTER GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, committed \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, committed \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"
    buildDir.mkdirs()
    new File(buildDir, "totalMemoryUsed.txt").text = heap.used
}

def format(def value) {
    value = value / (1024 * 1024)
    value = value.setScale(4, RoundingMode.DOWN)
    return "\${value}MB"
}
