/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.caching.internal.DefaultBuildCacheHasher
import org.gradle.api.internal.file.FileCollectionInternal
import org.gradle.api.internal.file.FileCollectionVisitor
import org.gradle.api.internal.file.FileTreeInternal
import org.gradle.api.internal.file.collections.DirectoryFileTree
import org.gradle.caching.internal.tasks.TaskOutputCachingListener
import org.gradle.caching.internal.tasks.TaskOutputCachingBuildCacheKey
import org.gradle.internal.classloader.ClassLoaderVisitor
import org.gradle.internal.classloader.ClassLoaderHierarchyHasher

pluginManager.withPlugin("com.gradle.build-scan") {
    if (gradle.startParameter.buildCacheEnabled) {
        buildScan.tag 'CACHED'

        ext.tasksToInvestigateForCache = project.hasProperty('cache.investigate.tasks') ? project.getProperty('cache.investigate.tasks').split(',') : [
            'compileJava',
            ':jar',
            ':docs:test',
            ':launcher:startScripts',
            ':toolingApi:shadedJarWithoutVersion',
            ':integTest',
            ':test',
            ':compileTestFixtures',
            ':compileTestGroovy',
            ':compileIntegTestGroovy',
        ]
        ext.tasksToInvestigateForCacheWithPaths = project.hasProperty('cache.investigate.tasks.paths') ? project.getProperty('cache.investigate.tasks.paths').split(',') : [
            ':baseServices:classpathManifest',
        ]
        ext.taskPropertiesWithFullFileSnapshot = [
            ':baseServices:compileJava': ['classpath'],
        ]

        def cacheConfiguration = gradle.services.get(org.gradle.caching.configuration.internal.BuildCacheConfigurationInternal)
        publishCacheConfiguration('local', cacheConfiguration.local)
        publishCacheConfiguration('remote', cacheConfiguration.remote)

        gradle.addListener(new TaskOutputCachingListener() {
            @Override
            void cacheKeyEvaluated(Task task, TaskOutputCachingBuildCacheKey key) {
                def buildScan = task.project.buildScan
                if (key.valid) {
                    buildScan.value "${task.path}-build-cache-key", String.valueOf(key.hashCode)
                    def inputs = key.inputs
                    buildScan.value "${task.path}-classloader-hash", String.valueOf(inputs.classLoaderHash)
                    int actionIndex = 0
                    inputs.actionClassLoaderHashes.each {
                        buildScan.value "${task.path}-action-classloader-hash-${actionIndex++}", String.valueOf(it)
                    }
                    if (tasksToInvestigateForCache.any { task.getPath().contains(it) }) {
                        inputs.inputHashes.each { name, hash ->
                            buildScan.value "${task.path}-input-${name}", String.valueOf(hash)
                        }
                        if (inputs.outputPropertyNames) {
                            buildScan.value "${task.path}-output-property-names", String.valueOf((inputs.outputPropertyNames as List).sort().join(', '))
                        }
                    }
                } else {
                    buildScan.value "${task.path}-build-cache-key", '<No cache key>'
                }
            }
        })

        project.buildScan.buildFinished(new Action() {
            public void execute(result) {
                for (Task task : (allprojects*.tasks).flatten()) {
                    if (task.state.executed && (tasksToInvestigateForCacheWithPaths.contains(task.getPath())
                        || taskPropertiesWithFullFileSnapshot.keySet().contains(task.getPath()))) {
                        def buildScan = task.project.buildScan
                        def fileProperties = task.inputs.fileProperties
                        fileProperties.each { inputProperty ->
                            def name = inputProperty.propertyName
                            def snapshotter = gradle.services.get(inputProperty.snapshotter)
                            def snapshot = snapshotter.snapshot(inputProperty.getPropertyFiles(), inputProperty.getCompareStrategy(), inputProperty.getSnapshotNormalizationStrategy())
                            def prefix = "${task.path}-input-${name}"
                            buildScan.value "${prefix}-hash", hashKey(snapshot)

                            if (tasksToInvestigateForCacheWithPaths.contains(task.path)) {
                                publishPaths(inputProperty.propertyFiles, prefix)
                            }
                            if (name in taskPropertiesWithFullFileSnapshot[task.getPath()]) {
                                publishIndividualFileHashes(snapshot, prefix)
                            }
                        }
                        if (tasksToInvestigateForCacheWithPaths.contains(task.path)) {
                            def hasher = gradle.services.get(ClassLoaderHierarchyHasher)
                            new Visitor(task.project.buildScan, hasher, task).visit(task.getClass().getClassLoader())
                        }
                    }
                }
            }

            private publishIndividualFileHashes(snapshot, prefix) {
                snapshot.appendToHasher(new org.gradle.caching.internal.DefaultBuildCacheHasher() {
                    private int idx = 0
                    @Override
                    public DefaultBuildCacheHasher putBytes(byte[] bytes) {
                        buildScan.value("${prefix}-snapshot-${String.format('%04d', idx++)}-hash", bytes.encodeHex().toString())
                    }
                    @Override
                    public DefaultBuildCacheHasher putString(CharSequence charSequence) {
                        buildScan.value("${prefix}-snapshot-${String.format('%04d', idx)}-path", charSequence)
                    }
                })
            }

            private publishPaths(propertyFiles, String prefix) {
                int idx = 0
                propertyFiles.visitRootElements(new FileCollectionVisitor() {
                    void visitCollection(FileCollectionInternal fileCollection) {
                        buildScan.value "${prefix}-${idx}-fileCollection", fileCollection.toString()
                        buildScan.value "${prefix}-${idx}-fileCollection-path", String.valueOf(fileCollection.files)
                        idx++
                    }

                    void visitTree(FileTreeInternal fileTree) {
                        buildScan.value "${prefix}-${idx}-fileTree", fileTree.toString()
                        idx++
                    }

                    void visitDirectoryTree(DirectoryFileTree directoryTree) {
                        buildScan.value "${prefix}-${idx}-dirTree", directoryTree.toString()
                        idx++
                    }
                })
            }

            private static String hashKey(some) {
                def builder = new org.gradle.caching.internal.DefaultBuildCacheHasher()
                some.appendToHasher(builder)
                builder.hash().toString()
            }
        })
    }
}

def publishCacheConfiguration(String role, cache) {
    if (cache?.enabled) {
        buildScan.tag "PULL-FROM-${role.toUpperCase()}"
        if (cache.push) {
            buildScan.tag "PUSH-TO-${role.toUpperCase()}"
        }
    }
    buildScan.value "build-cache-${role}-class", String.valueOf(cache?.getClass()?.superclass?.simpleName ?: "<no build cache>")
    if (cache != null) {
        buildScan.value "build-cache-${role}-enabled", String.valueOf(cache.enabled)
        buildScan.value "build-cache-${role}-push", String.valueOf(cache.push)
    }
}


class Visitor extends org.gradle.internal.classloader.ClassLoaderVisitor {
    final buildScan
    final ClassLoaderHierarchyHasher hasher
    final String prefix
    int counter

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, Task task) {
        this(buildScan, hasher, "${task.path}-classloader")
    }

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, String prefix) {
        this.buildScan = buildScan
        this.hasher = hasher
        this.prefix = prefix
    }

    private String classloaderHash(ClassLoader loader) {
        def hash = hasher.getClassLoaderHash(loader)
        if (hash != null) {
            return hash.toString()
        } else {
            null
        }
    }

    @Override
    void visit(ClassLoader classLoader) {
        def hash = classloaderHash(classLoader)
        if (hash) {
            def classloaderName = classLoader.getClass().getSimpleName()
            buildScan.value("${prefix}-${counter++}-${ classloaderName}-hash", hash)
            if ((counter <= 2) && (classLoader instanceof URLClassLoader && (!classloaderName.contains('ExtClassLoader')))) {
                buildScan.value("${prefix}-${counter - 1}-classpath", classLoader.getURLs().join(':'))
            }
        }
        super.visit(classLoader)
    }
}
